{% extends 'base.html.twig' %}

{% form_theme form 'bootstrap_5_layout.html.twig' %}

{% block title %} {{ form_name }} {% endblock %}

{% block body %}
    <script src="{{ asset("assets/timeline.js") }}"></script>
    <link href="{{ asset("assets/timeline.css") }}" rel="stylesheet" />

    <h2>{{ form_name }}</h2>
    <div class="row">
        <div id="notes-box" class="col-md-4 mb-4">
            <div id="notes-btn-box" class="mb-4 px-4 d-flex justify-content-end">
                <button id="btn-edit-title" class="btn btn-primary btn-sm mx-1">タイトル</button>
                <button id="btn-show-compact-notes" class="btn btn-outline-primary btn-sm mx-1">コンパクト版</button>
                <button id="btn-show-normal-notes" class="btn btn-outline-primary btn-sm mx-1">通常版</button>
                <button id="btn-show-compact-tag-notes" class="btn btn-outline-primary btn-sm mx-1">タグ版(C)</button>
                <button id="btn-show-normal-tag-notes" class="btn btn-outline-primary btn-sm mx-1">タグ版</button>
                <button id="btn-hidden-notes" class="btn btn-outline-primary btn-sm mx-1">非表示</button>
            </div>
            <div id="note-contents-box" class="px-1">
            </div>
        </div>
        <div class="col-md-8">
            {{ form_start(form) }}
            <div class="d-flex">
                {{ form_row(form.date) }}
                {{ form_row(form.startedAt) }}
                {{ form_row(form.finishedAt) }}
            </div>
            {{ form_row(form.title) }}
            {{ form_row(form.tags) }}
            <div class="d-flex mb-4">
                <input type="file" name="image" id="image-input">
            </div>
            {{ form_row(form.text) }}
            {{ form_row(form.save) }}
        </div>
    </div>
    <script>

    function api_upload_file(file) {
        console.log(file);
        const formData = new FormData();
        formData.append('image', file);
    
        fetch('{{ path('api_upload_files') }}', {
            method: 'POST',
            body: formData
        }).then(response => response.json())
            .then(data => {
                console.log(data);
                if (data.url) {
                    const textarea = document.getElementById('unitary_note_text');
                    textarea.value += `\n<img src="${data.url}" style="width: 100%; max-width: 540px;"/>\n`;
                }
            });
    };

    async function getUnits(date, mode) {
        let url = `{{ path('api_get_unitary', { date: 'today', mode: 'mode' }) }}`;
        url = url.replace('today', date);
        url = url.replace('mode', mode);
        console.log(url);
        const res = await fetch(url, {
                headers: {
                    "Content-Type": "application/json;charset=utf-8",
                    "Accept": "application/json"
                },
            });
        const retjson = await res.json();
        return retjson;
    };

    async function getUnitsByTagName(tagName) {
        let url = `{{ path('api_get_unitary_by_tag', { tagName: 'tagName' }) }}`;
        url = url.replace('tagName', tagName);
        console.log(url);
        const res = await fetch(url, {
                headers: {
                    "Content-Type": "application/json;charset=utf-8",
                    "Accept": "application/json"
                },
            });
        const retjson = await res.json();
        return retjson;
    };

    async function displayCompactNotes(date) {
        const noteContentsBoxEle = document.getElementById("note-contents-box");
        const units = await getUnits(date, "1day");

        units["units"].forEach((unit) => {
            let titleHtml = `<div class="unitary-date text-center">%%dateWithYoubi%%`
                        +`[<a class="btn btn-link btn-sm" href="{{ path('new_unitary_with_compact', { date: 'today' }) }}">`
                        +`    追加W`
                        +`</a>`
                        +`<a class="btn btn-link btn-sm" href="{{ path('app_unitary_date', { date: 'today' }) }}">`
                        +`    見る`
                        +`</a>`
                        +`]`
                    + `</div>`
                    + `<div class="text-center">%%title%%</div>`;
            titleHtml = titleHtml.replaceAll("%%dateWithYoubi%%", unit.dateWithYoubi);
            titleHtml = titleHtml.replaceAll("today", unit.date);
            titleHtml = titleHtml.replaceAll("%%title%%", unit.title);

            let notesHtml = `<hr>`
                        +`<div id="notes-today" class="unitary-text">`;
            
            unit.notes.forEach((note) => {
                let noteHtml = `・<a class="note-title" href="{{ path('edit_unitary_with_compact', { id: 'note_id' }) }}">`
                            +`  note_title`
                            +`</a>`;
                noteHtml = noteHtml.replaceAll("note_id", note.id);
                noteHtml = noteHtml.replaceAll("note_title", note.title);
                let tagsHtml = '';
                note.tags.forEach((tag) => {
                    let tagHtml = `<a class="badge bg-primary note-tags" href="{{ path('app_unitary', { tagName: 'tag_name' }) }}">`
                        + tag.name
                        +`</a>`
                    tagHtml = tagHtml.replaceAll("tag_name", tag.name);
                    tagsHtml += tagHtml;
                });
                notesHtml += noteHtml + tagsHtml + '<br/>';
            });
            notesHtml += `</div><hr>`;
            notesHtml = notesHtml.replaceAll("today", unit.date);

            noteContentsBoxEle.innerHTML += titleHtml;
            noteContentsBoxEle.innerHTML += notesHtml;
        });

        const boxes = document.querySelectorAll('.unitary-text');
        boxes.forEach((box) => {
            const events = [];
            const list = box.querySelectorAll('.note-title');
            list.forEach((item, index) => {
                const ll = document.createElement('div');
                ll.appendChild(item);
                const event = noteTitleToEvent(ll);
                if(event){
                    events.push(event);
                }
            });
            if(events.length > 0){
                box.classList.add("timeline");
                box.innerHTML = "";
                drawTimeline(box, events);
            }
        });
    }

    async function displayNormalNotes(date) {
        const noteContentsBoxEle = document.getElementById("note-contents-box");
        const units = await getUnits(date, "2day");

        units["units"].forEach((unit) => {
            let titleHtml = `<div class="unitary-date text-center">%%dateWithYoubi%%`
                        +`[<a class="btn btn-link btn-sm" href="{{ path('new_unitary_with_compact', { date: 'today' }) }}">`
                        +`    追加W`
                        +`</a>`
                        +`<a class="btn btn-link btn-sm" href="{{ path('app_unitary_date', { date: 'today' }) }}">`
                        +`    見る`
                        +`</a>`
                        +`]`
                    + `</div>`;
            titleHtml = titleHtml.replaceAll("%%dateWithYoubi%%", unit.dateWithYoubi);
            titleHtml = titleHtml.replaceAll("today", unit.date);

            let notesHtml = ``;
            unit.notes.forEach((note) => {
                let tagsHtml = '';
                note.tags.forEach((tag) => {
                    let tagHtml = `<a class="badge bg-primary note-tags" href="{{ path('app_unitary', { tagName: 'tag_name' }) }}">`
                        + tag.name
                        +`</a>`
                    tagHtml = tagHtml.replaceAll("tag_name", tag.name);
                    tagsHtml += tagHtml;
                });
                let noteHtml = `<div id="notes-today" class="unitary-title">`
                            +`  ・<a class="text-dark" href="{{ path('edit_unitary_with_compact', { id: 'note_id' }) }}">`
                            +`      note_title`
                            +`  </a>`
                            + tagsHtml
                            +`</div>`
                            +`<div class="unitary-text">note_textHtml</div>`
                            +`<div class="unitary-footer"></div>`;
                noteHtml = noteHtml.replaceAll("note_id", note.id);
                noteHtml = noteHtml.replaceAll("note_title", note.title);
                noteHtml = noteHtml.replaceAll("note_textHtml", note.textHtml);
                notesHtml += noteHtml;
            });
            notesHtml += `</div>`;
            notesHtml += `<div class="btn-bar text-center mt-3 mb-5"></div>`;
            notesHtml = notesHtml.replaceAll("today", unit.date);

            noteContentsBoxEle.innerHTML += titleHtml;
            noteContentsBoxEle.innerHTML += notesHtml;
        });
    }

    async function displayCompactNotesByTag(tagName) {
        console.log(tagName);
        const noteContentsBoxEle = document.getElementById("note-contents-box");
        const result = await getUnitsByTagName(tagName);

        result["units"].forEach((unit) => {
            let notesHtml =
                `<div class="unit-date-compact">${ unit.dateWithYoubi }</div>`
                +`<div id="notes-today" class="unitary-text">`;
            
            unit.notes.forEach((note) => {
                let noteHtml =
                    `・<a class="note-title" href="{{ path('edit_unitary_with_compact', { id: 'note_id' }) }}">`
                    +`  note_title`
                    +`</a>`;
                noteHtml = noteHtml.replaceAll("note_id", note.id);
                noteHtml = noteHtml.replaceAll("note_title", note.title);
                let tagsHtml = '';
                note.tags.forEach((tag) => {
                    if(tag.name == tagName) return;
                    let tagHtml = `<a class="badge bg-primary note-tags" href="{{ path('app_unitary', { tagName: 'tag_name' }) }}">`
                        + tag.name
                        +`</a>`
                    tagHtml = tagHtml.replaceAll("tag_name", tag.name);
                    tagsHtml += tagHtml;
                });
                notesHtml += noteHtml + tagsHtml + '<br/>';
            });
            notesHtml += `</div><hr>`;
            notesHtml = notesHtml.replaceAll("today", unit.date);

            noteContentsBoxEle.innerHTML += notesHtml;
        });
    }

    async function displayNormalNotesByTag(tagName) {
        console.log(tagName);
        const noteContentsBoxEle = document.getElementById("note-contents-box");
        const result = await getUnitsByTagName(tagName);

        let notesHtml = ``;
        result["units"].forEach((unit) => {
            notesHtml += `<div class="unit-date">${ unit.dateWithYoubi }</div><hr>`;
            unit.notes.forEach((note) => {
                let tagsHtml = '';
                note.tags.forEach((tag) => {
                    if(tag.name == tagName) return;
                    let tagHtml = `<a class="badge bg-primary note-tags" href="{{ path('app_unitary', { tagName: 'tag_name' }) }}">`
                        + tag.name
                        +`</a>`
                    tagHtml = tagHtml.replaceAll("tag_name", tag.name);
                    tagsHtml += tagHtml;
                });
                let noteHtml = 
                    `<div id="note-${ note.id }" note-id="${ note.id }">`
                    +`<div class="note-datetime">note_datetime</div>`
                    +`<div id="notes-today" class="unitary-title">`
                    +`  <a class="text-dark" href="{{ path('edit_unitary_with_compact', { id: 'note_id' }) }}">`
                    +`      note_title`
                    +`  </a>`
                    + tagsHtml
                    +`</div>`
                    +`<div class="unitary-text" onclick="startEditNote(${ note.id })">note_textHtml</div>`
                    +`<div class="note-edit-area" style="display: none;">`
                    +`  <textarea class="form-control" style="field-sizing: content; font-size:0.8rem;">note_textRaw</textarea>`
                    +`  <div class="mt-1 d-flex justify-content-end gap-2">`
                    +`    <button class="btn btn-sm btn-outline-secondary" type="button" onclick="closeNote(${note.id})">閉じる</button>`
                    +`    <button class="btn btn-sm btn-outline-primary" type="button" onclick="updateNote(${note.id})">更新</button>`
                    +`  </div>`
                    +`</div>`
                    +`<div class="unitary-footer"></div>`;
                    +`</div>`;
                noteHtml = noteHtml.replaceAll("note_id", note.id);
                noteHtml = noteHtml.replaceAll("note_datetime", note.title.substring(0, 13));
                noteHtml = noteHtml.replaceAll("note_title", note.title.substring(14, note.title.length));
                noteHtml = noteHtml.replaceAll("note_textHtml", note.textHtml);
                noteHtml = noteHtml.replaceAll("note_textRaw", note.text ?? '');
                notesHtml += noteHtml;
            });
        });

        noteContentsBoxEle.innerHTML += notesHtml;
    }

    async function clearNotes(height = 0) {
        const noteContentsBoxEle = document.getElementById("note-contents-box");
        noteContentsBoxEle.innerHTML = "";
        noteContentsBoxEle.style.height = height ? height + "px" : "null";
    }

    async function closeNote(noteId) {
        const editArea = document.querySelector(`#note-${noteId} .note-edit-area`);
        const showArea = document.querySelector(`#note-${noteId} .unitary-text`);
        editArea.style.display = "none";
        showArea.style.display = "block";
    }

    async function updateNote(noteId) {
        const editArea = document.querySelector(`#note-${noteId} .note-edit-area`);
        const editTextArea = document.querySelector(`#note-${noteId} .note-edit-area textarea`);
        const showArea = document.querySelector(`#note-${noteId} .unitary-text`);

        const payload = { text: editTextArea.value };

        try {
            let url = '{{ path('api_edit_unitary', { noteId: 'note_id' }) }}';
            url = url.replace('note_id', noteId);
            const res = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
            const data = await res.json();

            showArea.innerHTML = data.note.textHtml;
            editArea.style.display = "none";
            showArea.style.display = "block";

        } catch (err) {
            console.error('送信エラー', err);
            alert('送信失敗: ' + err.message);
        }
    }

    async function startEditNote(noteId) {
        const editArea = document.querySelector(`#note-${noteId} .note-edit-area`);
        const showArea = document.querySelector(`#note-${noteId} .unitary-text`);
        editArea.style.display = "block";
        showArea.style.display = "none";
    }

    let displayMode = "compact";

    async function onload() {
        const thisDateEle = document.getElementById("unitary_note_date");
        document.getElementById("btn-edit-title").onclick = (e) => {
            let path = `{{ path('edit_diary', { date: 'today' }) }}`;
            location.replace(path.replace("today", thisDateEle.value));
            return;
        };
        document.getElementById("btn-show-compact-notes").onclick = (e) => {
            clearNotes();
            displayMode = "compact";
            displayCompactNotes(thisDateEle.value);
        };
        document.getElementById("btn-show-normal-notes").onclick = (e) => {
            clearNotes(750);
            displayMode = "normal";
            displayNormalNotes(thisDateEle.value);
        };
        document.getElementById("btn-show-compact-tag-notes").onclick = (e) => {
            const checkedLabels = Array.from(
                document.querySelectorAll('#unitary_note_tags input[type="checkbox"]:checked')
            ).map(cb => document.querySelector(`label[for="${cb.id}"]`).textContent);
    
            if(!checkedLabels) return;
    
            const tagName = checkedLabels[0];
            clearNotes(750);
            displayMode = "compact";
            displayCompactNotesByTag(tagName);
        };
        document.getElementById("btn-show-normal-tag-notes").onclick = (e) => {
            const checkedLabels = Array.from(
                document.querySelectorAll('#unitary_note_tags input[type="checkbox"]:checked')
            ).map(cb => document.querySelector(`label[for="${cb.id}"]`).textContent);
    
            if(!checkedLabels) return;
    
            const tagName = checkedLabels[0];
            clearNotes(750);
            displayMode = "normal";
            displayNormalNotesByTag(tagName);
        };
        document.getElementById("btn-hidden-notes").onclick = (e) => {
            clearNotes();
            displayMode = "hidden";
        };

        document.getElementById("unitary_note_date").onchange = (e) => {
            clearNotes();
            if(displayMode === "hidden") return;
            if(displayMode === "compact"){
                displayCompactNotes(thisDateEle.value);
            }
            if(displayMode === "normal"){
                clearNotes(750);
                displayNormalNotes(thisDateEle.value);            
            }
        };

        document.getElementById('image-input').onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                api_upload_file(file);
            }
        };


        // 画面初期表示
        const checkedLabels = Array.from(
            document.querySelectorAll('#unitary_note_tags input[type="checkbox"]:checked')
        ).map(cb => document.querySelector(`label[for="${cb.id}"]`).textContent);

        if(checkedLabels.length > 0){
            // タグが選択されていたら、タグ一覧表示
            const tagName = checkedLabels[0];
            clearNotes(750);
            displayMode = "normal";
            displayNormalNotesByTag(tagName);
        } else {
            // なしなら、最近の日記を表示
            displayCompactNotes(thisDateEle.value);
        }
    }
    onload()
    </script>
    <style>
        #note-contents-box {
            overflow: scroll;
        }
        .unitary-date {
            font-size:1.1rem;
            font-weight:bold;
        }
        .unit-date {
            font-weight: bold;
            margin-bottom: -15px;
        }
        .unit-date-compact {
            font-weight: bold;
        }
        .unitary-title {
            font-size:0.9rem;
            font-weight:bold;
            margin-bottom:5px;
        }
        .unitary-text {
            min-height: 10px;
            overflow-wrap: break-word;
            padding-left: 13px;
        }
        .unitary-footer {
            margin-bottom:30px;
            text-align:right;
        }
        .note-tags {
            text-decoration: none;
        }
        .unitary-title ~ .note-datetime {
            margin-bottom: -5px;
            font-size: 0.7rem;
        }
    </style>
{% endblock %}